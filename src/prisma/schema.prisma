datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

model User {
  userId      String   @id @unique
  username    String   @unique
  isOnBoarded Boolean  @default(false)
  is_online   Boolean  @default(false)
  last_ping   DateTime @default(now())
  avatar      Int      @default(0)
  createdAt   DateTime @default(now())

  sentFriendRequests     FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")
  friendsAsUser1         Friendship[]    @relation("User1")
  friendsAsUser2         Friendship[]    @relation("User2")

  participatingIn ConversationUser[]
  sentMessages    Message[]          @relation("Sender")
}

model Conversation {
  id              String           @id @default(uuid())
  name            String? // Optional name for group conversations
  type            ConversationType @default(PRIVATE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  backgroundImage Int              @default(0)

  participants ConversationUser[]
  messages     Message[]
}

model ConversationUser {
  id                String   @id @default(uuid())
  userId            String
  conversationId    String
  joinedAt          DateTime @default(now())
  lastReadMessageId String?

  user            User         @relation(fields: [userId], references: [userId])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  lastReadMessage Message?     @relation("LastReadMessage", fields: [lastReadMessageId], references: [id])

  @@unique([userId, conversationId])
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime    @default(now())
  type           MessageType @default(TEXT)

  conversation Conversation       @relation(fields: [conversationId], references: [id])
  sender       User               @relation("Sender", fields: [senderId], references: [userId])
  lastReadBy   ConversationUser[] @relation("LastReadMessage")
}

enum MessageType {
  TEXT
  IMAGE
}

model FriendRequest {
  id         Int           @id @default(autoincrement())
  senderId   String
  receiverId String
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  sender   User @relation("Sender", fields: [senderId], references: [userId])
  receiver User @relation("Receiver", fields: [receiverId], references: [userId])

  @@unique([senderId, receiverId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("User1", fields: [user1Id], references: [userId])
  user2 User @relation("User2", fields: [user2Id], references: [userId])

  @@unique([user1Id, user2Id])
}

enum ConversationType {
  PRIVATE
  GROUP
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
